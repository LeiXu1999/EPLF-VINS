%YAML:1.0

#common parameters
imu_topic: "/mavros/imu/data"
image_topic: "/camera/infra1/image_rect_raw"
output_path: "/home/jiangdi/result_output/pose/euroc/EPLF_VINS_WS/" 

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 480
distortion_parameters:
   k1: 0.006896928127777268
   k2: -0.009144207062654397
   p1: 0.00025411397710392
   p2: 0.0021434982252719545
projection_parameters:
   fx: 380.9229090195708
   fy: 380.29264802262736
   cx: 324.68121181846755
   cy: 224.6741321466431


# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
#-0.040301239997409,   0.026311325355147,   0.998841090570831,   0.138044476707325, 
#-0.998999875552468,  -0.020436499663525,  -0.039769311380205,   0.014814825544913,
# 0.019366432320491,  -0.999444877739417,   0.027108627033059,  -0.034914942075322, 
# 0., 0., 0., 1.
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [-0.040301239997409, 0.026311325355147, 0.998841090570831, 
          -0.998999875552468, -0.020436499663525, -0.039769311380205, 
           0.019366432320491, -0.999444877739417, 0.027108627033059]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.138044476707325,0.014814825544913, -0.034914942075322]

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.1          # accelerometer measurement noise standard deviation. #0.2
gyr_n: 0.01          # gyroscope measurement noise standard deviation.     #0.05
acc_w: 0.001         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 0.0001      # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.805     # gravity magnitude


#loop closure parameters
loop_closure: 1                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "/home/jiangdi/result_output/pose/euroc/EPLF_VINS_WS/"  # save and load path

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
